name: Test Alerts (Slack + Email)

on:
  workflow_dispatch:
    inputs:
      environment:
        description: "Target environment"
        type: choice
        options: [staging, production]
        default: staging
      message:
        description: "Optional message override"
        required: false
  push:
    paths:
      - '.github/workflows/test-alerts.yml'

permissions:
  contents: read

jobs:
  check-secrets:
    name: Check required secrets
    runs-on: ubuntu-latest
    env:
      SLACK_WEBHOOK_URL_STAGING: ${{ secrets.SLACK_WEBHOOK_URL_STAGING }}
      SLACK_WEBHOOK_URL_PROD: ${{ secrets.SLACK_WEBHOOK_URL_PROD }}
      CICD_ALERT_URL: ${{ secrets.CICD_ALERT_URL }}
      CICD_ALERT_TOKEN: ${{ secrets.CICD_ALERT_TOKEN }}
    steps:
      - name: Check Slack webhook URLs
        run: |
          if [ -z "$SLACK_WEBHOOK_URL_STAGING" ]; then
            echo "‚ùå Missing required secret: SLACK_WEBHOOK_URL_STAGING"
            exit 1
          fi
          echo "‚úÖ SLACK_WEBHOOK_URL_STAGING is set"
          
          if [ -z "$SLACK_WEBHOOK_URL_PROD" ]; then
            echo "‚ùå Missing required secret: SLACK_WEBHOOK_URL_PROD"
            exit 1
          fi
          echo "‚úÖ SLACK_WEBHOOK_URL_PROD is set"

      - name: Warn if email alert secrets are missing
        run: |
          if [ -z "$CICD_ALERT_URL" ] || [ -z "$CICD_ALERT_TOKEN" ]; then
            echo "‚ö†Ô∏è Optional email alert secrets not fully set"
          else
            echo "‚úÖ Email alert secrets are set"
          fi

  send-alerts:
    name: Send test alerts
    needs: check-secrets
    runs-on: ubuntu-latest
    env:
      SLACK_WEBHOOK_URL_STAGING: ${{ secrets.SLACK_WEBHOOK_URL_STAGING }}
      SLACK_WEBHOOK_URL_PROD: ${{ secrets.SLACK_WEBHOOK_URL_PROD }}
      CICD_ALERT_URL: ${{ secrets.CICD_ALERT_URL }}
      CICD_ALERT_TOKEN: ${{ secrets.CICD_ALERT_TOKEN }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install jq
        run: |
          sudo apt-get update
          sudo apt-get install -y jq

      - name: Send email alert via Supabase (optional)
        if: env.CICD_ALERT_URL != '' && env.CICD_ALERT_TOKEN != ''
        run: |
          ENVIRONMENT="${{ inputs.environment || 'staging' }}"
          MESSAGE="Atlas test alert from GitHub Actions - ${{ inputs.message || 'No custom message' }}"
          
          BODY=$(jq -n --arg env "$ENVIRONMENT" --arg message "$MESSAGE" \
            '{ env: $env, message: $message }')

          STATUS=$(curl -s -o /dev/null -w "%{http_code}" \
            -X POST "$CICD_ALERT_URL" \
            -H "Authorization: Bearer $CICD_ALERT_TOKEN" \
            -H "Content-Type: application/json" \
            -d "$BODY")
          echo "Email function HTTP status: $STATUS"
          if [ "$STATUS" -lt 200 ] || [ "$STATUS" -ge 300 ]; then
            echo "‚ö†Ô∏è Email alert failed (non-blocking)."
          else
            echo "‚úÖ Email alert sent"
          fi

      - name: Send Slack Notification
        if: always()
        env:
          ENVIRONMENT: ${{ inputs.environment || 'staging' }}
          CUSTOM_MESSAGE: ${{ inputs.message || 'Atlas test alert from GitHub Actions' }}
        run: |
          # Determine webhook URL based on environment
          if [ "$ENVIRONMENT" = "production" ]; then
            WEBHOOK_URL="$SLACK_WEBHOOK_URL_PROD"
            ENV_EMOJI="üö®"
          else
            WEBHOOK_URL="$SLACK_WEBHOOK_URL_STAGING"
            ENV_EMOJI="üß™"
          fi
          
          # Determine status and color
          STATUS="${{ job.status }}"
          COLOR="#36a64f"
          EMOJI="‚úÖ"
          if [ "$STATUS" != "success" ]; then
            COLOR="#e01e5a"
            EMOJI="‚ùå"
          fi
          
          # Send to Slack
          if [ -n "$WEBHOOK_URL" ]; then
            curl -X POST -H 'Content-type: application/json' \
              --data "{
                \"attachments\": [
                  {
                    \"color\": \"$COLOR\",
                    \"blocks\": [
                      {
                        \"type\": \"header\",
                        \"text\": {
                          \"type\": \"plain_text\",
                          \"text\": \"$ENV_EMOJI $EMOJI Atlas CI/CD Alert ($ENVIRONMENT)\",
                          \"emoji\": true
                        }
                      },
                      {
                        \"type\": \"section\",
                        \"fields\": [
                          { \"type\": \"mrkdwn\", \"text\": \"*Repository:*\n${{ github.repository }}\" },
                          { \"type\": \"mrkdwn\", \"text\": \"*Environment:*\n$ENVIRONMENT\" },
                          { \"type\": \"mrkdwn\", \"text\": \"*Job:*\n${{ job.name }}\" },
                          { \"type\": \"mrkdwn\", \"text\": \"*Status:*\n$STATUS\" },
                          { \"type\": \"mrkdwn\", \"text\": \"*Actor:*\n${{ github.actor }}\" },
                          { \"type\": \"mrkdwn\", \"text\": \"*Commit:*\n${{ github.sha }}\" },
                          { \"type\": \"mrkdwn\", \"text\": \"*Run:*\n<${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}|View Details>\" },
                          { \"type\": \"mrkdwn\", \"text\": \"*Timestamp:*\n$(date -u '+%Y-%m-%d %H:%M:%S UTC')\" }
                        ]
                      },
                      {
                        \"type\": \"section\",
                        \"text\": {
                          \"type\": \"mrkdwn\",
                          \"text\": \"*Message:* $CUSTOM_MESSAGE\"
                        }
                      }
                    ]
                  }
                ]
              }" \
              "$WEBHOOK_URL"
            
            echo "‚úÖ Slack alert sent successfully"
          else
            echo "‚ö†Ô∏è No webhook URL configured for environment: $ENVIRONMENT"
          fi