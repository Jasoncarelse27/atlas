name: Manual Rollback

on:
  workflow_dispatch:
    inputs:
      environment:
        description: "Target environment (staging/production)"
        required: true
        default: staging
        type: choice
        options:
          - staging
          - production
      reason:
        description: "Reason for rollback"
        required: true
        type: string
      confirm:
        description: "Type ROLLBACK to confirm"
        required: true
        type: string

permissions:
  contents: read

env:
  RECIPIENTS: "admin@otiumcreations.com,rima@otiumcreations.com"

jobs:
  check-secrets:
    runs-on: ubuntu-latest
    env:
      SLACK_WEBHOOK_URL_STAGING: ${{ secrets.SLACK_WEBHOOK_URL_STAGING }}
      SLACK_WEBHOOK_URL_PROD: ${{ secrets.SLACK_WEBHOOK_URL_PROD }}
      CICD_ALERT_URL: ${{ secrets.CICD_ALERT_URL }}
      CICD_ALERT_TOKEN: ${{ secrets.CICD_ALERT_TOKEN }}
      SUPABASE_DB_URL: ${{ secrets.SUPABASE_DB_URL }}
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Verify Required Secrets
        run: |
          echo "üîç Checking required secrets..."
          if [ -z "$SLACK_WEBHOOK_URL_STAGING" ]; then
            echo "‚ùå Missing SLACK_WEBHOOK_URL_STAGING secret"
            exit 1
          fi
          if [ -z "$SLACK_WEBHOOK_URL_PROD" ]; then
            echo "‚ùå Missing SLACK_WEBHOOK_URL_PROD secret"
            exit 1
          fi
          if [ -z "$CICD_ALERT_URL" ]; then
            echo "‚ùå Missing CICD_ALERT_URL secret"
            exit 1
          fi
          if [ -z "$CICD_ALERT_TOKEN" ]; then
            echo "‚ùå Missing CICD_ALERT_TOKEN secret"
            exit 1
          fi
          if [ -z "$SUPABASE_DB_URL" ]; then
            echo "‚ùå Missing SUPABASE_DB_URL secret"
            exit 1
          fi
          echo "‚úÖ All required secrets are configured"

  rollback:
    needs: check-secrets
    if: github.event.inputs.confirm == 'ROLLBACK'
    runs-on: ubuntu-latest
    env:
      SLACK_WEBHOOK_URL_STAGING: ${{ secrets.SLACK_WEBHOOK_URL_STAGING }}
      SLACK_WEBHOOK_URL_PROD: ${{ secrets.SLACK_WEBHOOK_URL_PROD }}
      CICD_ALERT_URL: ${{ secrets.CICD_ALERT_URL }}
      CICD_ALERT_TOKEN: ${{ secrets.CICD_ALERT_TOKEN }}
      SUPABASE_DB_URL: ${{ secrets.SUPABASE_DB_URL }}
      RECIPIENTS: "admin@otiumcreations.com,rima@otiumcreations.com"
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Install jq
        run: |
          sudo apt-get update
          sudo apt-get install -y jq

      - name: Send Rollback Started Notification
        run: |
          ENVIRONMENT="${{ github.event.inputs.environment }}"
          REASON="${{ github.event.inputs.reason }}"
          MESSAGE="üîÑ Rollback STARTED - $REASON"
          
          # Send email notification
          if [ -n "$CICD_ALERT_URL" ] && [ -n "$CICD_ALERT_TOKEN" ]; then
            BODY=$(jq -n --arg env "$ENVIRONMENT" --arg message "$MESSAGE" \
              '{ env: $env, message: $message }')
            
            curl -s -X POST "$CICD_ALERT_URL" \
              -H "Authorization: Bearer $CICD_ALERT_TOKEN" \
              -H "Content-Type: application/json" \
              -d "$BODY" || echo "Email notification failed (non-blocking)"
          fi

      - name: Run Rollback SQL
        run: |
          echo "üîÑ Executing rollback migration..."
          psql "${SUPABASE_DB_URL}" -v "ON_ERROR_STOP=1" -f supabase/migrations/20250914_rollback_subscription_columns.sql
          echo "‚úÖ Rollback SQL executed successfully"

      - name: Send Standardized Slack Alert
        if: always()
        env:
          ENVIRONMENT: ${{ github.event.inputs.environment }}
          JOB_NAME: ${{ job.name }}
          WORKFLOW_NAME: ${{ github.workflow }}
          ACTOR: ${{ github.actor }}
          SHA: ${{ github.sha }}
          RUN_URL: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
          CUSTOM_MESSAGE: "üîÑ Database rollback - ${{ github.event.inputs.reason }}"
        run: |
          # Determine webhook URL based on environment
          if [ "$ENVIRONMENT" = "production" ]; then
            WEBHOOK_URL="$SLACK_WEBHOOK_URL_PROD"
            EMOJI="üö®"
            COLOR="danger"
          else
            WEBHOOK_URL="$SLACK_WEBHOOK_URL_STAGING"
            EMOJI="üß™"
            COLOR="warning"
          fi
          
          # Determine status and color
          if [ "${{ job.status }}" = "success" ]; then
            STATUS_EMOJI="‚úÖ"
            STATUS_COLOR="good"
          else
            STATUS_EMOJI="‚ùå"
            STATUS_COLOR="danger"
          fi
          
          # Get timestamp
          TIMESTAMP=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
          
          # Get last 10 log lines (if available)
          LOG_LINES=""
          if [ -f "$GITHUB_STEP_SUMMARY" ]; then
            LOG_LINES=$(tail -10 "$GITHUB_STEP_SUMMARY" | sed 's/"/\\"/g' | tr '\n' '\\n')
          fi
          
          # Prepare message
          SHORT_SHA="${SHA:0:7}"
          MESSAGE="$CUSTOM_MESSAGE"
          
          # Create Slack payload
          PAYLOAD=$(jq -n \
            --arg color "$STATUS_COLOR" \
            --arg title "$EMOJI $STATUS_EMOJI $JOB_NAME - $ENVIRONMENT" \
            --arg title_link "$RUN_URL" \
            --arg environment "$ENVIRONMENT" \
            --arg actor "$ACTOR" \
            --arg commit "$SHORT_SHA" \
            --arg workflow "$WORKFLOW_NAME" \
            --arg message "$MESSAGE" \
            --argjson ts "$(date +%s)" \
            '{
              attachments: [{
                color: $color,
                title: $title,
                title_link: $title_link,
                fields: [
                  {title: "Environment", value: $environment, short: true},
                  {title: "Actor", value: $actor, short: true},
                  {title: "Commit", value: $commit, short: true},
                  {title: "Workflow", value: $workflow, short: true},
                  {title: "Message", value: $message, short: false}
                ],
                footer: "Atlas CI/CD",
                ts: $ts
              }]
            }')
          
          # Add log lines if available
          if [ -n "$LOG_LINES" ]; then
            PAYLOAD=$(echo "$PAYLOAD" | jq --arg logs "$LOG_LINES" '.attachments[0].fields += [{"title": "Recent Logs", "value": $logs, "short": false}]')
          fi
          
          # Send to Slack
          if [ -n "$WEBHOOK_URL" ]; then
            STATUS=$(curl -s -o /dev/null -w "%{http_code}" \
              -X POST -H "Content-Type: application/json" \
              --data "$PAYLOAD" \
              "$WEBHOOK_URL")
            
            if [ "$STATUS" -ge 200 ] && [ "$STATUS" -lt 300 ]; then
              echo "‚úÖ Slack alert sent successfully (HTTP $STATUS)"
            else
              echo "‚ùå Slack alert failed (HTTP $STATUS)"
              exit 1
            fi
          else
            echo "‚ö†Ô∏è No webhook URL configured for environment: $ENVIRONMENT"
          fi