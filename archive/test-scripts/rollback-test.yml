name: Rollback Test (Staging)

on:
  schedule:
    - cron: '0 6 * * 1' # Every Monday at 06:00 UTC
  workflow_dispatch:

permissions:
  contents: read

env:
  RECIPIENTS: 'admin@otiumcreations.com,rima@otiumcreations.com'

jobs:
  check-secrets:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Verify Required Secrets
        run: |
          echo "üîç Checking required secrets for rollback test..."
          if [ -z "${{ secrets.SLACK_WEBHOOK_URL }}" ]; then
            echo "‚ùå Missing SLACK_WEBHOOK_URL secret"
            exit 1
          fi
          if [ -z "${{ secrets.CICD_ALERT_URL }}" ]; then
            echo "‚ùå Missing CICD_ALERT_URL secret"
            exit 1
          fi
          if [ -z "${{ secrets.CICD_ALERT_TOKEN }}" ]; then
            echo "‚ùå Missing CICD_ALERT_TOKEN secret"
            exit 1
          fi
          if [ -z "${{ secrets.SUPABASE_DB_URL }}" ]; then
            echo "‚ùå Missing SUPABASE_DB_URL secret"
            exit 1
          fi
          if [ -z "${{ secrets.SUPABASE_DB_HOST }}" ]; then
            echo "‚ùå Missing SUPABASE_DB_HOST secret"
            exit 1
          fi
          if [ -z "${{ secrets.SUPABASE_DB_USER }}" ]; then
            echo "‚ùå Missing SUPABASE_DB_USER secret"
            exit 1
          fi
          if [ -z "${{ secrets.SUPABASE_DB_PASS }}" ]; then
            echo "‚ùå Missing SUPABASE_DB_PASS secret"
            exit 1
          fi
          echo "‚úÖ All required secrets are configured"

  rollback-test:
    needs: check-secrets
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Run Rollback Notification (TEST)
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
          CICD_ALERT_URL: ${{ secrets.CICD_ALERT_URL }}
          CICD_ALERT_TOKEN: ${{ secrets.CICD_ALERT_TOKEN }}
          RECIPIENTS: ${{ env.RECIPIENTS }}
        run: |
          ./scripts/notify-rollback.sh "STARTED" "STAGING" "Automated rollback test"

      - name: Dry Run Rollback SQL
        env:
          SUPABASE_DB_URL: ${{ secrets.SUPABASE_DB_URL }}
          SUPABASE_DB_HOST: ${{ secrets.SUPABASE_DB_HOST }}
          SUPABASE_DB_USER: ${{ secrets.SUPABASE_DB_USER }}
          SUPABASE_DB_PASS: ${{ secrets.SUPABASE_DB_PASS }}
          SUPABASE_DB_NAME: ${{ secrets.SUPABASE_DB_NAME }}
        run: |
          echo "üß™ Running dry-run rollback test..."

          # Debug: Show connection details (masked for security)
          echo "üîç Database connection details:"
          echo "Host: ${SUPABASE_DB_HOST}"
          echo "User: ${SUPABASE_DB_USER}"
          echo "Database: ${SUPABASE_DB_NAME}"
          echo "URL format: $(echo "${SUPABASE_DB_URL}" | sed 's/:[^:]*@/:***@/')"

          # Validate host format
          if [[ "${SUPABASE_DB_HOST}" =~ \.supabase\.co$ ]]; then
            echo "‚úÖ Host format is correct (.supabase.co)"
          else
            echo "‚ùå Host format is incorrect - should end with .supabase.co"
            echo "Current host: ${SUPABASE_DB_HOST}"
            exit 1
          fi

          # Test connection using individual parameters
          echo "üîå Testing database connection..."
          PGPASSWORD="${SUPABASE_DB_PASS}" psql \
            -h "${SUPABASE_DB_HOST}" \
            -U "${SUPABASE_DB_USER}" \
            -d "${SUPABASE_DB_NAME}" \
            -c "SELECT 1;" || {
            echo "‚ùå Database connection failed"
            echo "Trying with full URL as fallback..."
            psql "${SUPABASE_DB_URL}" -c "SELECT 1;" || {
              echo "‚ùå Both connection methods failed"
              exit 1
            }
          }

          # Run the rollback migration using individual parameters
          echo "üìù Running rollback migration..."
          PGPASSWORD="${SUPABASE_DB_PASS}" psql \
            -h "${SUPABASE_DB_HOST}" \
            -U "${SUPABASE_DB_USER}" \
            -d "${SUPABASE_DB_NAME}" \
            -f supabase/migrations/20250914_rollback_subscription_columns.sql \
            --set=ON_ERROR_STOP=off || {
            echo "‚ö†Ô∏è Individual connection failed, trying URL method..."
            psql "${SUPABASE_DB_URL}" -f supabase/migrations/20250914_rollback_subscription_columns.sql --set=ON_ERROR_STOP=off
          }
          echo "‚úÖ Dry run completed"

      - name: Confirm Audit Log
        env:
          SUPABASE_DB_URL: ${{ secrets.SUPABASE_DB_URL }}
          SUPABASE_DB_HOST: ${{ secrets.SUPABASE_DB_HOST }}
          SUPABASE_DB_USER: ${{ secrets.SUPABASE_DB_USER }}
          SUPABASE_DB_PASS: ${{ secrets.SUPABASE_DB_PASS }}
          SUPABASE_DB_NAME: ${{ secrets.SUPABASE_DB_NAME }}
        run: |
          echo "üìä Checking audit log..."

          # Test connection before querying
          echo "üîå Testing database connection for audit log..."
          PGPASSWORD="${SUPABASE_DB_PASS}" psql \
            -h "${SUPABASE_DB_HOST}" \
            -U "${SUPABASE_DB_USER}" \
            -d "${SUPABASE_DB_NAME}" \
            -c "SELECT 1;" || {
            echo "‚ùå Individual connection failed, trying URL method..."
            psql "${SUPABASE_DB_URL}" -c "SELECT 1;" || {
              echo "‚ùå Database connection failed for audit log"
              exit 1
            }
          }

          # Query audit log using individual parameters
          echo "SELECT * FROM migration_log ORDER BY executed_at DESC LIMIT 5;" | \
          PGPASSWORD="${SUPABASE_DB_PASS}" psql \
            -h "${SUPABASE_DB_HOST}" \
            -U "${SUPABASE_DB_USER}" \
            -d "${SUPABASE_DB_NAME}" || {
            echo "‚ö†Ô∏è Individual connection failed, trying URL method..."
            echo "SELECT * FROM migration_log ORDER BY executed_at DESC LIMIT 5;" | psql "${SUPABASE_DB_URL}"
          }
          echo "‚úÖ Audit log check completed"

      - name: Run Rollback Notification (SUCCEEDED)
        if: success()
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
          CICD_ALERT_URL: ${{ secrets.CICD_ALERT_URL }}
          CICD_ALERT_TOKEN: ${{ secrets.CICD_ALERT_TOKEN }}
          RECIPIENTS: ${{ env.RECIPIENTS }}
        run: |
          ./scripts/notify-rollback.sh "SUCCEEDED" "STAGING" "Automated rollback test completed"
