# ============================
# Atlas Enhanced Tier Gate System Test Suite
# Comprehensive testing for intelligent model selection, caching, and budget protection
# ============================

### 1. Health Check - Verify tier gate system is active
# Expected: { "status": "ok", "tierGateSystem": "active" }
GET http://localhost:3000/healthz

### 2. Admin Metrics - Initial baseline
# Expected: JSON with dailySpend, modelUsage, cacheEfficiency, alerts
GET http://localhost:3000/admin/metrics

### ============================
### MODEL SELECTION TESTS
### ============================

### 3. Free User - Simple Message (should get Haiku)
# Expected: metadata.model = "claude-3-haiku"
# Reasoning: Free users always get cheapest model regardless of content
POST http://localhost:3000/message
Content-Type: application/json

{
  "userId": "test-free-user",
  "tier": "free",
  "message": "hello there",
  "type": "chat"
}

### 4. Free User - Complex Message (should still get Haiku)
# Expected: metadata.model = "claude-3-haiku"
# Reasoning: Free users locked to Haiku for cost control
POST http://localhost:3000/message
Content-Type: application/json

{
  "userId": "test-free-user",
  "tier": "free",
  "message": "I need a comprehensive analysis of my emotional patterns and detailed breakdown",
  "type": "chat"
}

### 5. Core User - Simple Message (should get Haiku)
# Expected: metadata.model = "claude-3-haiku"
# Reasoning: Simple messages get cost-optimized Haiku even for paying users
POST http://localhost:3000/message
Content-Type: application/json

{
  "userId": "test-core-user",
  "tier": "core",
  "message": "thanks",
  "type": "chat"
}

### 6. Core User - Emotional Content (should get Sonnet)
# Expected: metadata.model = "claude-3-sonnet"
# Reasoning: Emotional keywords trigger Sonnet for better analysis
POST http://localhost:3000/message
Content-Type: application/json

{
  "userId": "test-core-user",
  "tier": "core",
  "message": "I feel anxious about work and my relationship is stressing me out",
  "type": "emotional_analysis"
}

### 7. Studio User - Simple Message (should get Haiku)
# Expected: metadata.model = "claude-3-haiku"
# Reasoning: Even Studio users get cost-optimized Haiku for simple messages
POST http://localhost:3000/message
Content-Type: application/json

{
  "userId": "test-studio-user",
  "tier": "studio",
  "message": "hi",
  "type": "chat"
}

### 8. Studio User - Emotional Content (should get Sonnet)
# Expected: metadata.model = "claude-3-sonnet"
# Reasoning: Emotional content gets Sonnet, not Opus
POST http://localhost:3000/message
Content-Type: application/json

{
  "userId": "test-studio-user",
  "tier": "studio",
  "message": "I feel overwhelmed and need help managing my emotions and stress levels",
  "type": "emotional_analysis"
}

### 9. Studio User - Complex Analysis (should get Opus)
# Expected: metadata.model = "claude-3-opus"
# Reasoning: Pure analytical content with complexity triggers Opus for Studio users
POST http://localhost:3000/message
Content-Type: application/json

{
  "userId": "test-studio-user",
  "tier": "studio",
  "message": "Please provide a comprehensive analysis using advanced algorithms and methodology. I need detailed breakdown of complex behavioral patterns with multiple analytical factors. This requires deep dive strategic planning with long-term comprehensive evaluation of interconnected psychological frameworks.",
  "type": "complex_analysis"
}

### 10. Studio User - Multi-sentence Complex (should get Opus)
# Expected: metadata.model = "claude-3-opus"
# Reasoning: >5 sentences triggers complexity analysis for Studio users
POST http://localhost:3000/message
Content-Type: application/json

{
  "userId": "test-studio-user",
  "tier": "studio",
  "message": "I need strategic analysis. Please examine multiple factors. Consider long-term implications. Evaluate complex interconnections. Provide comprehensive insights. This requires detailed examination. Multiple perspectives are needed.",
  "type": "analytical"
}

### ============================
### PROMPT CACHING TESTS
### ============================

### 11. First Cache Test - System Personality (should miss cache)
# Expected: systemPromptCached = true, cache miss logged
POST http://localhost:3000/message
Content-Type: application/json

{
  "userId": "cache-test-user-1",
  "tier": "core",
  "message": "test caching system",
  "type": "cache_test"
}

### 12. Second Cache Test - Same User Context (should hit cache)
# Expected: systemPromptCached = true, cache hit logged, faster response
POST http://localhost:3000/message
Content-Type: application/json

{
  "userId": "cache-test-user-1",
  "tier": "core",
  "message": "another message with same context",
  "type": "cache_test"
}

### 13. Different User Context (should miss cache)
# Expected: systemPromptCached = true, cache miss for different user
POST http://localhost:3000/message
Content-Type: application/json

{
  "userId": "cache-test-user-2",
  "tier": "core",
  "message": "test with different user context",
  "type": "cache_test"
}

### ============================
### BUDGET PROTECTION TESTS
### ============================

### 14. Check Current Budget Status
# Expected: budgetUtilization should be very low (< 1%)
GET http://localhost:3000/admin/metrics

### 15. Simulate High Usage Free User
# Expected: Should work normally (under $20 ceiling)
POST http://localhost:3000/message
Content-Type: application/json

{
  "userId": "high-usage-free",
  "tier": "free",
  "message": "testing budget limits",
  "type": "budget_test"
}

### 16. Simulate High Usage Core User
# Expected: Should work normally (under $100 ceiling)
POST http://localhost:3000/message
Content-Type: application/json

{
  "userId": "high-usage-core",
  "tier": "core",
  "message": "testing core tier budget limits",
  "type": "budget_test"
}

### 17. Simulate High Usage Studio User
# Expected: Should work normally (under $80 ceiling)
POST http://localhost:3000/message
Content-Type: application/json

{
  "userId": "high-usage-studio",
  "tier": "studio",
  "message": "testing studio tier budget limits",
  "type": "budget_test"
}

### ============================
### ADMIN METRICS VALIDATION
### ============================

### 18. Final Admin Metrics Check
# Expected: Updated model usage counts, cache stats, budget tracking
# Should show: haiku, sonnet, opus usage counts
# Should show: cache hit rate improving
# Should show: total daily spend by tier
GET http://localhost:3000/admin/metrics

### 19. Admin Metrics - Detailed Validation
# Expected: Comprehensive metrics with all test data
# Verify: dailySpend.byTier shows free/core/studio usage
# Verify: modelUsage shows haiku/sonnet/opus counts
# Verify: cacheEfficiency shows hit rate and savings
# Verify: alerts array (should be empty for normal usage)
GET http://localhost:3000/admin/metrics

### ============================
### EDGE CASE TESTS
### ============================

### 20. Invalid Tier (should default to free)
# Expected: metadata.model = "claude-3-haiku"
# Reasoning: Invalid tiers default to free tier with Haiku
POST http://localhost:3000/message
Content-Type: application/json

{
  "userId": "test-invalid-tier",
  "tier": "invalid",
  "message": "testing invalid tier handling",
  "type": "edge_case"
}

### 21. Missing Message Content
# Expected: Should handle gracefully
POST http://localhost:3000/message
Content-Type: application/json

{
  "userId": "test-empty-message",
  "tier": "core",
  "message": "",
  "type": "edge_case"
}

### 22. Very Long Message for Studio User
# Expected: metadata.model = "claude-3-opus"
# Reasoning: Word count > 100 should trigger complexity analysis
POST http://localhost:3000/message
Content-Type: application/json

{
  "userId": "test-long-message",
  "tier": "studio",
  "message": "This is a very long message that contains more than one hundred words to test the word count complexity analysis feature of the intelligent model selection system. The message needs to be sufficiently long to trigger the complex analysis logic that should route Studio users to the Claude-3 Opus model when dealing with lengthy, detailed content that requires comprehensive processing and analysis capabilities beyond what the Sonnet model can provide effectively.",
  "type": "complexity_test"
}

### ============================
### FINAL SYSTEM VALIDATION
### ============================

### 23. Complete System Health Check
# Expected: All systems operational, no critical alerts
GET http://localhost:3000/admin/metrics

### 24. Final Model Usage Summary
# Expected: Clear distribution of model usage across tiers
# Free users: Only Haiku
# Core users: Haiku for simple, Sonnet for emotional
# Studio users: Haiku/Sonnet/Opus based on complexity
GET http://localhost:3000/admin/metrics

# ============================
# Test Suite Complete!
# Expected Results Summary:
# - Free users: Always Haiku (cost control)
# - Core users: Haiku for simple, Sonnet for emotional
# - Studio users: Optimal model based on content complexity
# - Cache hit rate: Improving with repeated requests
# - Budget tracking: All spending logged by tier
# - Admin metrics: Real-time visibility into system performance
# ============================
