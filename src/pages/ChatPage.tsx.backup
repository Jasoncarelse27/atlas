import { AnimatePresence, motion } from 'framer-motion';
import { Menu, X } from 'lucide-react';
import React, { useCallback, useEffect, useRef, useState } from 'react';
import EnhancedUpgradeModal from '../components/EnhancedUpgradeModal';
import { MessageListWithPreviews } from '../components/MessageListWithPreviews';
import { ScrollToBottomButton } from '../components/ScrollToBottomButton';
import SyncStatus from '../components/SyncStatus';
import EnhancedInputToolbar from '../components/chat/EnhancedInputToolbar';
import EnhancedMessageBubble from '../components/chat/EnhancedMessageBubble';
import { useAutoScroll } from '../hooks/useAutoScroll';
import { useMemoryIntegration } from '../hooks/useMemoryIntegration';
// Removed usePersistentMessages import - using direct message management instead
import { atlasDB } from '../database/atlasDB';
import { useNetworkStatus } from '../hooks/useNetworkStatus';
import { useSubscription } from '../hooks/useSubscription';
import ErrorBoundary from '../lib/errorBoundary';
import { checkSupabaseHealth, supabase } from '../lib/supabaseClient';
import { chatService } from '../services/chatService';
import { runDbMigrations } from '../services/dbMigrations';
import { initRetryScheduler, startBackgroundSync, stopBackgroundSync } from '../services/syncService';
// Removed useMessageStore import - using usePersistentMessages as single source of truth
import type { Message } from '../types/chat';
import { generateUUID } from '../utils/uuid';

// Sidebar components
import InsightsWidget from '../components/sidebar/InsightsWidget';
import PrivacyToggle from '../components/sidebar/PrivacyToggle';
import QuickActions from '../components/sidebar/QuickActions';
import UsageCounter from '../components/sidebar/UsageCounter';

// Conversation History
import { ConversationHistoryDrawer } from '../components/ConversationHistoryDrawer';

interface ChatPageProps {
  user?: any;
}

const ChatPage: React.FC<ChatPageProps> = () => {
  const [healthError, setHealthError] = useState<string | null>(null);
  const [retrying, setRetrying] = useState(false);
  const [isTyping, setIsTyping] = useState(false);
  const [isStreaming, setIsStreaming] = useState(false);
  const [assistantHasStarted, setAssistantHasStarted] = useState(false);
  const [sidebarOpen, setSidebarOpen] = useState(false);
  const [conversationId, setConversationId] = useState<string | null>(null);
  const [userId, setUserId] = useState<string | null>(null);
  
  // ‚úÖ OFFLINE RESILIENCE - Use existing Atlas network hook
  const { isOnline } = useNetworkStatus();
  
  // Conversation History Modal State
  const [showHistoryModal, setShowHistoryModal] = useState(false);
  const [conversations, setConversations] = useState<any[]>([]);
  const [deletingId, setDeletingId] = useState<string | null>(null);
  
  // ‚úÖ OFFLINE RESILIENCE - Simple message queue
  const [offlineQueue, setOfflineQueue] = useState<Message[]>([]);

  // Load conversations when modal opens (from both Supabase and local)
  useEffect(() => {
    const loadConversations = async () => {
      if (!showHistoryModal || !userId) return;
      
      try {
        console.log('üìã Loading conversations for user:', userId);
        
        // Load from Supabase (primary source) - only non-deleted conversations
        const { data: supabaseData, error } = await supabase
          .from('conversations')
          .select('id, title, created_at, updated_at, deleted_at')
          .eq('user_id', userId)
          .order('updated_at', { ascending: false })
          .limit(50);

        // Filter out deleted conversations on the client side as backup
        const filteredData = supabaseData?.filter(conv => !conv.deleted_at) || [];

        if (error) {
          console.error('‚ùå Error loading conversations from Supabase:', error);
          // Fallback to local data
          try {
            const localConversations = await atlasDB.conversations
              .where('user_id')
              .equals(userId)
              .toArray();
            console.log('üì± Using local conversations as fallback:', localConversations.length);
            console.log('üì± Local conversations data:', localConversations);
            setConversations(localConversations || []);
          } catch (localError) {
            console.error('‚ùå Failed to load local conversations:', localError);
            setConversations([]);
          }
          return;
        }

        console.log('‚úÖ Loaded conversations from Supabase (raw):', supabaseData?.length || 0);
        console.log('‚úÖ Loaded conversations from Supabase (filtered):', filteredData.length);
        console.log('üîç Supabase conversations data:', supabaseData);
        console.log('üîç Filtered conversations data:', filteredData);
        
        // Test: Check if we can see deleted conversations (should be empty)
        try {
          const { data: allConversations } = await supabase
            .from('conversations')
            .select('id, title, deleted_at')
            .eq('user_id', userId);
          console.log('üß™ All conversations (including deleted):', allConversations?.length || 0);
          const deletedCount = allConversations?.filter(c => c.deleted_at).length || 0;
          console.log('üß™ Deleted conversations count:', deletedCount);
        } catch (testError) {
          console.log('üß™ Test query failed:', testError);
        }
        
        // Also verify local data matches and trigger sync if needed
        try {
          const localConversations = await atlasDB.conversations
            .where('user_id')
            .equals(userId)
            .toArray();
          console.log('üì± Local conversations count:', localConversations.length);
          
          if (localConversations.length !== (supabaseData?.length || 0)) {
            console.warn('‚ö†Ô∏è Mismatch between Supabase and local conversation counts - triggering sync');
            // Trigger sync to fix the mismatch (force sync regardless of tier)
            try {
              const { syncService } = await import('../services/syncService');
              // Force sync regardless of tier for deletion consistency
              await syncService.syncAll(userId, 'core', true);
              console.log('‚úÖ Forced sync completed after mismatch detection');
            } catch (syncError) {
              console.log('Sync trigger failed (non-critical):', syncError);
            }
          }
        } catch (localError) {
          console.log('üì± Could not verify local conversations:', localError);
        }

        setConversations(filteredData);
      } catch (err) {
        console.error('‚ùå Failed to load conversations:', err);
        setConversations([]);
      }
    };

    loadConversations();
  }, [showHistoryModal, userId]);
  // Removed duplicate useMessageStore - using usePersistentMessages as single source of truth
  const inputRef = useRef<HTMLTextAreaElement>(null);

  // Memory integration
  const { processUserMessage } = useMemoryIntegration({ userId: userId || undefined });

  // Subscription management
  const { refresh: refreshProfile } = useSubscription(userId || undefined);

  // Direct message management - single source of truth
  const [messages, setMessages] = useState<Message[]>([]);
  
  // ‚úÖ CRITICAL DEBUG: Track all setMessages calls
  const debugSetMessages = (newMessages: Message[] | ((prev: Message[]) => Message[]), source: string) => {
    console.log(`[ChatPage] üîÑ setMessages called from ${source}:`, {
      newMessages: Array.isArray(newMessages) ? newMessages : 'function',
      currentMessages: messages.length,
      stackTrace: new Error().stack?.split('\n').slice(1, 4)
    });
    setMessages(newMessages);
  };
  
  // Enhanced addMessage function with Dexie persistence
  // ‚úÖ BULLETPROOF MESSAGE SAVING - Enhanced Persistence
  const addMessage = async (message: Message) => {
    console.log('[ChatPage] üíæ BULLETPROOF SAVE - Message:', { id: message.id, role: message.role, content: message.content?.slice(0, 50) });
    
    // Add to UI immediately
    debugSetMessages(prev => [...prev, message], 'addMessage');
    
    try {
      // Ensure we have valid data
      const effectiveUserId = userId || 'anonymous-user';
      let effectiveConversationId = conversationId;
      
      // ‚úÖ CRITICAL FIX: Always use the current conversation ID from URL/state
      if (!effectiveConversationId) {
        // First try to get from URL
        const urlId = new URLSearchParams(window.location.search).get('conversation');
        if (urlId) {
          effectiveConversationId = urlId;
          setConversationId(effectiveConversationId);
          localStorage.setItem('atlas:lastConversationId', effectiveConversationId);
          console.log('[ChatPage] üîß Using conversation ID from URL:', effectiveConversationId);
        } else {
          // Only create new if no URL ID exists
          effectiveConversationId = generateUUID();
          setConversationId(effectiveConversationId);
          localStorage.setItem('atlas:lastConversationId', effectiveConversationId);
          
          // Update URL to include the new conversation ID
          const newUrl = `/chat?conversation=${effectiveConversationId}`;
          window.history.pushState({}, '', newUrl);
          
          console.log('[ChatPage] üîß Created new conversation ID and updated URL:', effectiveConversationId);
        }
      }
      
      // ‚úÖ CRITICAL FIX: Debug what content we're actually saving
      console.log('[ChatPage] üîç Content being saved:', { 
        originalContent: message.content, 
        contentType: typeof message.content,
        contentLength: message.content?.length,
        isEmpty: !message.content || message.content.trim() === ""
      });
      
      // ‚úÖ CRITICAL FIX: Never lose original content - always preserve user input
      const contentToStore = message.content || '(Empty message)';
      
      // ‚úÖ CRITICAL FIX: Only reject truly empty messages (allow single spaces, etc.)
      if (!message.content) {
        console.error('[ChatPage] ‚ùå CRITICAL ERROR: Message has no content property:', message);
        return;
      }
      
      // Save to Dexie with guaranteed success
      const messageToSave = {
        id: message.id,
        conversationId: effectiveConversationId,
        userId: effectiveUserId,
        role: message.role,
        type: message.type || 'text',
        content: contentToStore, // ‚úÖ CRITICAL: This should never be empty for user messages
        timestamp: message.timestamp,
        synced: false,
        updatedAt: new Date().toISOString(),
        metadata: message.metadata || {}
      };
      
      // ‚úÖ CRITICAL FIX: Final validation - only reject if content is completely missing
      if (message.role === 'user' && !messageToSave.content) {
        console.error('[ChatPage] ‚ùå FINAL VALIDATION FAILED: User message has no content property:', messageToSave);
        return;
      }
      
      console.log('[ChatPage] üíæ SAVING TO DEXIE:', {
        id: messageToSave.id,
        role: messageToSave.role,
        content: messageToSave.content,
        contentLength: messageToSave.content?.length,
        conversationId: messageToSave.conversationId
      });
      
      await atlasDB.messages.put(messageToSave);
      
      console.log('[ChatPage] ‚úÖ Message saved successfully to Dexie with conversationId:', effectiveConversationId);
    } catch (error) {
      console.error('[ChatPage] ‚ùå Failed to save message:', error);
    }
  };
  
  // Enhanced updateMessage function with Dexie sync
  const updateMessage = async (id: string, patch: Partial<Message>) => {
    debugSetMessages(prev => prev.map(msg => 
      msg.id === id ? { ...msg, ...patch } : msg
    ), 'updateMessage');
    
    // Update in Dexie as well
    try {
      await atlasDB.messages.update(id, {
        content: patch.content || '',
        updatedAt: new Date().toISOString()
      });
    } catch (error) {
    }
  };
  
  // Enhanced refreshMessages function with Dexie persistence
  const refreshMessages = async () => {
    try {
      
      // Get current conversation ID from URL or localStorage
      const urlParams = new URLSearchParams(window.location.search);
      const currentConvId = urlParams.get('conversation') || localStorage.getItem('atlas:lastConversationId');
      
      console.log('[ChatPage] refreshMessages - currentConvId:', currentConvId);
      console.log('[ChatPage] üîÑ Force refresh - clearing any cached data');
      
      if (currentConvId) {
        // ‚úÖ BULLETPROOF: Load ALL messages for this conversation, no filtering
        const allStoredMessages = await atlasDB.messages
          .where("conversationId")
          .equals(currentConvId)
          .sortBy("timestamp");
        
        console.log('[ChatPage] üîç DEBUGGING: Found', allStoredMessages.length, 'messages for conversation:', currentConvId);
        
        if (allStoredMessages.length > 0) {
          const formattedMessages = allStoredMessages.map(msg => {
            // ‚úÖ EMERGENCY FIX: Ensure content is never empty to prevent rendering issues
            const actualContent = msg.content && msg.content.trim() !== "" 
              ? msg.content 
              : msg.role === 'user' 
                ? 'User message' 
                : 'AI response';
                
            console.log('[ChatPage] Processing message:', { 
              id: msg.id, 
              content: actualContent,
              role: msg.role,
              contentLength: actualContent.length
            });
            
            return {
              id: msg.id,
              role: msg.role,
              content: actualContent,
              timestamp: msg.timestamp,
              type: msg.type || 'text',
              status: 'sent' as const,
              attachments: [],
              metadata: msg.metadata || {},
              url: null,
              imageUrl: null,
              audioUrl: null
            };
          });
          
          console.log('[ChatPage] ‚úÖ Setting', formattedMessages.length, 'messages with preserved content');
          debugSetMessages(formattedMessages, 'refreshMessages-success');
        } else {
          console.log('[ChatPage] No messages found for conversation:', currentConvId);
          debugSetMessages([], 'refreshMessages-no-messages');
        }
      } else {
        console.log('[ChatPage] No conversation ID found');
        debugSetMessages([], 'refreshMessages-no-conversation-id');
      }
    } catch (error) {
      console.error('[ChatPage] refreshMessages error:', error);
    }
  };

  // Messages container ref for scroll detection
  const messagesContainerRef = useRef<HTMLDivElement>(null);
  
  // Modern scroll system with golden sparkle
  const { bottomRef, scrollToBottom, showScrollButton, shouldGlow } = useAutoScroll([messages || []], messagesContainerRef);
  
  // Auto-scroll when messages change
  useEffect(() => {
    if (messages && messages.length > 0) {
      setTimeout(() => {
        if (messagesContainerRef.current) {
          messagesContainerRef.current.scrollTop = messagesContainerRef.current.scrollHeight;
        }
      }, 100);
    }
  }, [messages]);

  // Ensure scroll to bottom on page refresh/initial load
  useEffect(() => {
    if (messages && messages.length > 0) {
      // Additional scroll to bottom on initial load to ensure it works
      setTimeout(() => {
        scrollToBottom();
      }, 200);
    }
  }, []); // Run once on mount

  // Simple logout function
  const handleLogout = async () => {
    try {
      const { supabase } = await import('../lib/supabase');
      await supabase.auth.signOut();
      window.location.href = '/login';
    } catch (error) {
    }
  };

  // Upgrade modal state
  const [upgradeModalVisible, setUpgradeModalVisible] = React.useState(false);
  const [upgradeReason, setUpgradeReason] = React.useState('monthly limit');
  const [currentUsage, setCurrentUsage] = React.useState<number | undefined>();
  const [limit, setLimit] = React.useState<number | undefined>();

  // Guard to prevent duplicate calls using ref (immediate, no state update delay)
  const isProcessingRef = useRef(false);
  
  // ‚úÖ BULLETPROOF: Separate processing state that's always properly reset
  const [isProcessing, setIsProcessing] = useState(false);
  
  // Handle text messages - delegate to chatService with offline support
  const handleTextMessage = async (text: string) => {
    // Guard against duplicate calls
    if (isProcessingRef.current) {
      return;
    }
    
    isProcessingRef.current = true;
    setIsProcessing(true); // ‚úÖ Set UI processing state
    
    // ‚úÖ SAFETY TIMEOUT: Ensure UI never gets permanently stuck (30 seconds max)
    const safetyTimeout = setTimeout(() => {
      console.warn('‚ö†Ô∏è [ChatPage] Safety timeout triggered - resetting processing state');
      isProcessingRef.current = false;
      setIsProcessing(false);
      setIsTyping(false);
      setIsStreaming(false);
    }, 30000);
    
    try {
      // ‚úÖ CRITICAL FIX: Create and save message FIRST, then process memory
      // This ensures message persistence is never blocked by memory processing
      console.log('[ChatPage] üîç Text input debug:', { 
        text, 
        textType: typeof text, 
        textLength: text?.length,
        isEmpty: !text || text.trim() === ""
      });

      const message: Message = {
        id: generateUUID(),
        role: 'user',
        type: 'text',
        content: text.trim(), // ‚úÖ CRITICAL: Use original text directly, trimmed
        timestamp: new Date().toISOString(),
        status: isOnline ? 'sending' : 'pending',
      };

      // ‚úÖ CRITICAL FIX: Validate message content before proceeding
      if (!message.content || message.content.length === 0) {
        console.error('[ChatPage] ‚ùå CRITICAL: Empty message content, aborting save');
        isProcessingRef.current = false;
        setIsProcessing(false);
        clearTimeout(safetyTimeout);
        return;
      }

      console.log('[ChatPage] Created user message:', message);

      // ‚úÖ CRITICAL FIX: Save message to Dexie FIRST (blocking)
      await addMessage(message);
      
      // ‚úÖ CRITICAL FIX: Process memory SECOND (non-blocking, fire-and-forget)
      // Delay memory processing to ensure message is saved first
      setTimeout(() => {
        processUserMessage(text).catch(error => {
          console.warn('[ChatPage] Memory processing failed (non-critical):', error);
        });
      }, 100);

      // ‚úÖ OFFLINE RESILIENCE - Queue message if offline
      if (!isOnline) {
        console.log('üì± [ChatPage] Offline - queuing message for later');
        setOfflineQueue(prev => [...prev, message]);
        updateMessage(message.id, { status: 'pending' });
        isProcessingRef.current = false;
        setIsProcessing(false);
        clearTimeout(safetyTimeout);
        return;
      }

      // NOW show typing indicator after user message is visible (online only)
      setIsTyping(true);
      setIsStreaming(true);
      setAssistantHasStarted(false);

      // Use chatService as the single source of truth
      const assistantResponse = await chatService.sendMessage(text, () => {
        // Update message status to sent
        updateMessage(message.id, { status: 'sent' });
      }, conversationId || undefined, userId || 'anonymous');
      
      // Refresh profile to get updated usage stats
      try {
        await refreshProfile();
      } catch (refreshError) {
      }
      
      // ‚úÖ Create assistant message immediately with typing dots
      const assistantMessageId = generateUUID();
      const assistantMessage: Message = {
        id: assistantMessageId,
        role: 'assistant',
        type: 'text',
        content: '...', // Start with typing dots
        timestamp: new Date().toISOString(),
        status: 'sending', // Show as loading
      };

      // ‚úÖ Add assistant message to UI immediately for typing effect
      debugSetMessages(prev => [...prev, assistantMessage], 'typing-indicator');
      
      // ‚úÖ Also save typing indicator to Dexie so it can be updated later
      await addMessage(assistantMessage);

      // ‚úÖ Check if backend returned a different conversation ID and update BEFORE saving messages
      let finalConversationId = conversationId;
      if (assistantResponse && typeof assistantResponse === 'object' && assistantResponse.conversationId) {
        finalConversationId = assistantResponse.conversationId;
        setConversationId(finalConversationId);
        localStorage.setItem('atlas:lastConversationId', finalConversationId);
        
        // Update URL to include conversation ID
        const newUrl = `/chat?conversation=${finalConversationId}`;
        window.history.pushState({}, '', newUrl);
        console.log('[ChatPage] Updated conversation ID from backend:', finalConversationId);
        
        // ‚úÖ Update any messages with temp conversationId to the real conversationId
        try {
          const tempMessages = await atlasDB.messages
            .where('conversationId')
            .startsWith('temp-')
            .toArray();
          
          if (tempMessages.length > 0) {
            console.log(`[ChatPage] Updating ${tempMessages.length} temp messages with real conversationId`);
            for (const tempMsg of tempMessages) {
              await atlasDB.messages.update(tempMsg.id, {
                conversationId: finalConversationId
              });
            }
          }
        } catch (updateError) {
          console.warn('[ChatPage] Failed to update temp messages:', updateError);
        }
      } else if (!conversationId) {
        // ‚úÖ If no conversation ID exists, create one and update URL
        finalConversationId = crypto.randomUUID();
        setConversationId(finalConversationId);
        localStorage.setItem('atlas:lastConversationId', finalConversationId);
        
        const newUrl = `/chat?conversation=${finalConversationId}`;
        window.history.pushState({}, '', newUrl);
        console.log('[ChatPage] Created new conversation ID:', finalConversationId);
      }

      // Add loading message immediately with typing dots (using final conversation ID)
      const finalAssistantMessage = {
        ...assistantMessage,
        conversationId: finalConversationId
      };
      await addMessage(finalAssistantMessage);

      // Update user message with final conversation ID too
      await updateMessage(message.id, { conversationId: finalConversationId });

      // Once response starts coming in, mark as streaming and clear typing
      setIsTyping(false);
      setAssistantHasStarted(true);

      // Update with actual response when ready
      if (assistantResponse) {
        const responseText = typeof assistantResponse === 'string' 
          ? assistantResponse 
          : assistantResponse.response;
        
        console.log('[ChatPage] üîÑ Updating assistant message with response:', responseText?.slice(0, 50));
        
        // ‚úÖ CRITICAL FIX: Update the existing typing message, don't create new one
        updateMessage(assistantMessageId, { 
          content: responseText,
          status: 'sent',
          conversationId: finalConversationId
        });
      }
      
      // Reset streaming states when complete
      setIsStreaming(false);
      setAssistantHasStarted(false);
    } catch (error) {
      setIsTyping(false);
      setIsStreaming(false);
      setAssistantHasStarted(false);
      
      // ‚úÖ Handle monthly limit reached
      if (error instanceof Error && error.message === 'MONTHLY_LIMIT_REACHED') {
        // Show upgrade modal with usage info
        setCurrentUsage(15); // User has reached the limit
        setLimit(15);
        setUpgradeReason('monthly message limit');
        setUpgradeModalVisible(true);
        return;
      }
    } finally {
      clearTimeout(safetyTimeout); // ‚úÖ Clear safety timeout
      isProcessingRef.current = false;
      setIsProcessing(false); // ‚úÖ Always reset UI processing state
    }
  };

  // Get authenticated user
  useEffect(() => {
    const getAuthUser = async () => {
      const { data: { user } } = await supabase.auth.getUser();
      if (user) {
        setUserId(user.id);
      }
    };
    getAuthUser();
  }, []);

  // Initialize conversation and run migrations (only once per session)
  useEffect(() => {
    if (!userId) return;
    
    // Check if we've already run migrations this session
    const migrationKey = `migration-run-${userId}`;
    if (sessionStorage.getItem(migrationKey)) {
      return; // Already ran migrations this session
    }
    
    const initializeApp = async () => {
      try {
        // ‚úÖ Run database migrations (single source of truth) - only once per session
        await runDbMigrations(userId);
        
        // Mark migrations as run for this session
        sessionStorage.setItem(migrationKey, 'true');
        
        // ‚úÖ REMOVED: refreshMessages() call - handled by single loading system below
        
        // ‚úÖ Start background sync for Core/Studio tiers
        const { data: { user } } = await supabase.auth.getUser();
        if (user) {
          // Use backend API for consistent tier detection (same as other hooks)
          try {
            const { data: { session } } = await supabase.auth.getSession();
            const accessToken = session?.access_token;
            
            if (accessToken) {
              const response = await fetch(`/v1/user_profiles/${user.id}`, {
                method: 'GET',
                headers: {
                  'Authorization': `Bearer ${accessToken}`,
                  'apikey': import.meta.env.VITE_SUPABASE_ANON_KEY,
                  'Content-Type': 'application/json',
                },
              });
              
              if (response.ok) {
                const profile = await response.json();
                const tier = profile?.subscription_tier || 'core'; // Default to core instead of free
                console.log(`‚úÖ [ChatPage] Starting background sync for tier: ${tier}`);
                startBackgroundSync(user.id, tier);
                initRetryScheduler(); // Initialize retry scheduler
              } else {
                startBackgroundSync(user.id, 'core');
                initRetryScheduler(); // Initialize retry scheduler
              }
            } else {
              startBackgroundSync(user.id, 'core');
              initRetryScheduler(); // Initialize retry scheduler
            }
          } catch (error) {
            startBackgroundSync(user.id, 'core'); // Default to core instead of free
            initRetryScheduler(); // Initialize retry scheduler
          }
        }
        
        // ‚úÖ Check if conversation ID is in URL or localStorage (auto-restore)
        const urlParams = new URLSearchParams(window.location.search);
        const urlConversationId = urlParams.get('conversation');
        const lastConversationId = localStorage.getItem('atlas:lastConversationId');
        
        let id: string;
        if (urlConversationId) {
          // Load existing conversation from URL
          id = urlConversationId;
          console.log('[ChatPage] Using conversation ID from URL:', id);
        } else if (lastConversationId) {
          // Auto-restore last conversation
          id = lastConversationId;
          console.log('[ChatPage] Using conversation ID from localStorage:', id);
        } else {
          // Create new conversation
          id = generateUUID();
          console.log('[ChatPage] Creating new conversation ID:', id);
        }
        
        // Save conversation ID for auto-restore
        localStorage.setItem('atlas:lastConversationId', id);
        setConversationId(id);
        
        // ‚úÖ Update URL if it's missing the conversation ID
        if (!urlConversationId && id) {
          const newUrl = `/chat?conversation=${id}`;
          window.history.replaceState({}, '', newUrl);
          console.log('[ChatPage] Updated URL with conversation ID:', id);
        }
        
        // ‚úÖ REMOVED: refreshMessages() call - handled by single loading system below
      } catch (error) {
      }
    };

    initializeApp();
  }, [userId]); // ‚úÖ CRITICAL FIX: Removed refreshMessages dependency to prevent race condition
  
  // ‚úÖ Removed redundant refreshMessages call - handled by single loading system
  
  // ‚úÖ SINGLE MESSAGE LOADING SYSTEM - No More Loops!
  const hasLoadedMessagesRef = useRef(false);
  
  useEffect(() => {
    const loadMessagesOnMount = async () => {
      // ‚úÖ CRITICAL FIX: Prevent multiple loads using ref (immediate update)
      if (hasLoadedMessagesRef.current) {
        console.log('[ChatPage] üö´ Skipping message load - already loaded');
        return;
      }
      
      // ‚úÖ CRITICAL FIX: Set loading flag immediately
      hasLoadedMessagesRef.current = true;
      
                try {
                  const savedId = localStorage.getItem('atlas:lastConversationId');
                  
                  // ‚úÖ CRITICAL FIX: Debug URL parameter parsing
                  const urlParams = new URLSearchParams(window.location.search);
                  const urlId = urlParams.get('conversation');
                  console.log('[ChatPage] üîç URL DEBUG:', {
                    fullUrl: window.location.href,
                    search: window.location.search,
                    urlParams: Object.fromEntries(urlParams.entries()),
                    urlId: urlId
                  });
                  
                  // ‚úÖ CRITICAL FIX: Fallback URL parsing if URLSearchParams fails
                  let finalUrlId = urlId;
                  if (!finalUrlId && window.location.href.includes('conversation=')) {
                    const match = window.location.href.match(/conversation=([^&]+)/);
                    finalUrlId = match ? match[1] : null;
                    console.log('[ChatPage] üîß FALLBACK URL PARSING:', { finalUrlId });
                  }
                  
                  const currentConvId = finalUrlId || savedId;
        
        console.log('[ChatPage] üîÑ SINGLE LOAD - Saved ID:', savedId, 'URL ID:', urlId, 'Final:', currentConvId);
        
        if (currentConvId) {
          // ‚úÖ CRITICAL FIX: Update conversationId state IMMEDIATELY
          setConversationId(currentConvId);
          
          // ‚úÖ CRITICAL FIX: Ensure localStorage is updated
          localStorage.setItem('atlas:lastConversationId', currentConvId);
          
          console.log('[ChatPage] üîÑ Loading messages for conversation:', currentConvId);
          
          const cached = await atlasDB.messages
            .where("conversationId")
            .equals(currentConvId)
            .sortBy("timestamp");
          
          console.log('[ChatPage] üîç Raw Dexie messages:', cached);
          
          if (cached?.length) {
            console.log(`[ChatPage] ‚úÖ Loaded ${cached.length} messages from Dexie`);
            // ‚úÖ CRITICAL FIX: Debug what's actually in Dexie before cleanup
            console.log('[ChatPage] üîç ALL MESSAGES IN DEXIE:');
            cached.forEach((msg, index) => {
              console.log(`[ChatPage] Message ${index}:`, {
                id: msg.id,
                role: msg.role,
                content: msg.content,
                contentLength: msg.content?.length,
                isEmpty: !msg.content || msg.content.trim() === "",
                isUser: msg.role === 'user'
              });
            });
            
                      // ‚úÖ NORMAL CLEANUP: Only run once, then stop
                      const hasRunCleanup = localStorage.getItem('atlas:cleanup-run');
                      let messagesToDelete = [];
                      
                      // ‚úÖ RESTORED: Normal cleanup behavior (only run once)
                      if (!hasRunCleanup) {
                        // Only delete messages that are explicitly corrupted with fallback text
                        messagesToDelete = cached.filter(msg => 
                          msg.role === 'user' && msg.content === '(Message restored from backup)'
                        );
                        
                        if (messagesToDelete.length > 0) {
                          console.log('[ChatPage] üßπ Running one-time cleanup for corrupted messages...');
                          localStorage.setItem('atlas:cleanup-run', 'true');
                        }
                      } else {
                        console.log('[ChatPage] ‚úÖ Cleanup already completed - skipping');
                      }
            
                      console.log('[ChatPage] üîç MESSAGES TO DELETE (one-time cleanup):', messagesToDelete.map(m => ({ id: m.id, role: m.role, content: m.content })));
            
            // Delete corrupted messages (one-time only)
            for (const msg of messagesToDelete) {
              try {
                await atlasDB.messages.delete(msg.id);
                          console.log(`[ChatPage] üóëÔ∏è Deleted corrupted message (one-time cleanup): ${msg.id}`);
              } catch (deleteError) {
                console.warn(`[ChatPage] Failed to delete empty message:`, deleteError);
              }
            }
            
            // Now process the remaining messages (no need to filter since we already deleted empty ones)
            const formattedMessages = cached
              .map(msg => {
                console.log('[ChatPage] üîç Processing message:', { id: msg.id, role: msg.role, content: msg.content, fullMessage: msg });
                
                // ‚úÖ CRITICAL FIX: Debug content and only use fallback for truly empty content
                console.log('[ChatPage] üîç Content check:', { 
                  content: msg.content, 
                  trimmed: msg.content?.trim(), 
                  isEmpty: !msg.content || msg.content.trim() === "", 
                  isEmptyMessage: msg.content === '(Empty message)'
                });
                
                // ‚úÖ CRITICAL DEBUG: Log exactly what content we're processing
                console.log(`[ChatPage] üîç PROCESSING CONTENT for ${msg.role} message ${msg.id}:`, {
                  originalContent: msg.content,
                  contentType: typeof msg.content,
                  contentLength: msg.content?.length,
                  isEmpty: !msg.content || msg.content.trim() === "",
                  isUser: msg.role === 'user'
                });
                
                const actualContent = (msg.content && msg.content.trim() !== "" && msg.content !== '(Empty message)') 
                  ? msg.content 
                  : '(Message restored from backup)';
                  
                console.log(`[ChatPage] üîç FINAL CONTENT for ${msg.role} message ${msg.id}:`, {
                  actualContent,
                  willShowFallback: actualContent === '(Message restored from backup)'
                });
                
                return {
                  id: msg.id,
                  role: msg.role,
                  content: actualContent,
                  timestamp: msg.timestamp,
                  type: msg.type || 'text',
                  status: 'sent' as const,
                  attachments: [],
                  metadata: msg.metadata || {},
                  url: null,
                  imageUrl: null,
                  audioUrl: null
                };
              });
            
            console.log('[ChatPage] ‚úÖ Formatted messages (after cleanup):', formattedMessages);
            debugSetMessages(formattedMessages, 'loadMessagesOnMount-success');
          } else {
            console.log('[ChatPage] ‚ùå No messages found in Dexie for conversation:', currentConvId);
            debugSetMessages([], 'loadMessagesOnMount-no-messages');
          }
        } else {
          console.log('[ChatPage] ‚ùå No conversation ID found - starting fresh');
          debugSetMessages([], 'loadMessagesOnMount-no-conversation-id');
          setConversationId(null);
        }
        
        // ‚úÖ Loading flag already set at start of function
      } catch (err) {
        console.error('[ChatPage] ‚ùå SINGLE LOAD FAILED:', err);
        debugSetMessages([], 'loadMessagesOnMount-error');
        // ‚úÖ Loading flag already set at start of function
      }
    };
    
    // ‚úÖ CRITICAL FIX: Only run once on mount, no dependencies
    loadMessagesOnMount();
  }, []); // Empty dependency array - run once only
  
  // ‚úÖ OFFLINE RESILIENCE - Retry queued messages when back online
  useEffect(() => {
    if (isOnline && offlineQueue.length > 0) {
      console.log('üåê [ChatPage] Back online - retrying', offlineQueue.length, 'queued messages');
      
      // Process each queued message
      offlineQueue.forEach(async (queuedMessage) => {
        try {
          console.log('üîÑ [ChatPage] Retrying message:', queuedMessage.content?.slice(0, 50));
          
          // Use existing chatService to send the message
          const response = await chatService.sendMessage(
            queuedMessage.content,
            () => {
              // Update message status to sent
              updateMessage(queuedMessage.id, { status: 'sent' });
            },
            conversationId || undefined,
            userId || 'anonymous'
          );
          
          if (response) {
            console.log('‚úÖ [ChatPage] Offline message sent successfully');
          }
        } catch (error) {
          console.error('‚ùå [ChatPage] Failed to retry offline message:', error);
        }
      });
      
      // Clear the queue after processing
      setOfflineQueue([]);
    }
  }, [isOnline, offlineQueue, conversationId, userId]);

  // Cleanup background sync on unmount
  useEffect(() => {
    return () => {
      stopBackgroundSync();
    };
  }, []);

  // ‚úÖ New conversation handler - properly clears state and shows welcome screen
  const handleNewConversation = useCallback(async () => {
    console.log('[ChatPage] Starting new conversation...');
    
    // Clear current conversation state
    debugSetMessages([], 'handleNewConversation');
    setConversationId(null);
    setAssistantHasStarted(false);
    setIsTyping(false);
    setIsStreaming(false);
    
    // ‚úÖ Close the sidebar to show the main chat area
    setSidebarOpen(false);
    
    // Clear localStorage
    localStorage.removeItem('atlas:lastConversationId');
    
    // Navigate to clean URL
    window.history.pushState({}, '', '/chat');
    
    // ‚úÖ Focus the input field after a brief delay to ensure UI is updated
    setTimeout(() => {
      if (inputRef.current) {
        inputRef.current.focus();
        console.log('[ChatPage] Input field focused for new conversation');
      }
    }, 100);
    
    console.log('[ChatPage] New conversation started - welcome screen ready');
  }, []);
  
  // ‚úÖ Debug function - expose to window for console debugging
  useEffect(() => {
    (window as any).atlasDebug = {
      getConversationId: () => conversationId,
      getMessages: () => messages,
      refreshMessages: () => refreshMessages(),
      getLocalStorage: () => localStorage.getItem('atlas:lastConversationId'),
      checkDexie: async () => {
        const allMessages = await atlasDB.messages.toArray();
        console.log('üîç All Dexie messages:', allMessages);
        return allMessages;
      },
      checkConversationMessages: async (convId?: string) => {
        const targetId = convId || conversationId || localStorage.getItem('atlas:lastConversationId');
        if (!targetId) {
          console.log('‚ùå No conversation ID provided');
          return;
        }
        const convMessages = await atlasDB.messages.where("conversationId").equals(targetId).toArray();
        console.log(`üîç Messages for conversation ${targetId}:`, convMessages);
        return convMessages;
      },
      testMessagePersistence: async () => {
        console.log('üß™ Testing message persistence...');
        const testMessage = {
          id: generateUUID(),
          role: 'user' as const,
          type: 'text' as const,
          content: 'Test message for persistence',
          timestamp: new Date().toISOString(),
          status: 'sent' as const
        };
        await addMessage(testMessage);
        console.log('‚úÖ Test message added, refresh page to test persistence');
      },
      debugConversationIds: async () => {
        console.log('üîç DEBUGGING CONVERSATION IDS:');
        console.log('Current conversationId state:', conversationId);
        console.log('URL conversation param:', new URLSearchParams(window.location.search).get('conversation'));
        console.log('localStorage conversationId:', localStorage.getItem('atlas:lastConversationId'));
        
        const allMessages = await atlasDB.messages.toArray();
        const uniqueConversationIds = [...new Set(allMessages.map(m => m.conversationId))];
        console.log('All conversation IDs in Dexie:', uniqueConversationIds);
        console.log('Total messages:', allMessages.length);
        
        return {
          currentState: conversationId,
          urlParam: new URLSearchParams(window.location.search).get('conversation'),
          localStorage: localStorage.getItem('atlas:lastConversationId'),
          dexieConversationIds: uniqueConversationIds,
          totalMessages: allMessages.length
        };
      },
      clearAllMessages: async () => {
        console.log('üßπ Clearing all Dexie messages...');
        await atlasDB.messages.clear();
        console.log('‚úÖ All messages cleared');
        await refreshMessages();
      },
      startFreshConversation: async () => {
        console.log('üîÑ Starting completely fresh conversation...');
        await atlasDB.messages.clear();
        localStorage.removeItem('atlas:lastConversationId');
        window.location.href = '/chat';
      },
              forceDatabaseReset: async () => {
                console.log('üí• Force resetting entire database...');
                await atlasDB.delete();
                console.log('‚úÖ Database deleted, will recreate on next load');
                localStorage.clear();
                window.location.reload();
              },
              resetCleanupFlag: () => {
                console.log('üîÑ Resetting cleanup flag - cleanup will run again on next refresh');
                localStorage.removeItem('atlas:cleanup-run');
                console.log('‚úÖ Cleanup flag reset - refresh the page to run cleanup');
              },
              checkAllMessages: async () => {
                console.log('üîç CHECKING ALL MESSAGES IN DEXIE:');
                const allMessages = await atlasDB.messages.toArray();
                console.log('Total messages:', allMessages.length);
                allMessages.forEach((msg, index) => {
                  console.log(`Message ${index}:`, {
                    id: msg.id,
                    role: msg.role,
                    content: msg.content,
                    contentLength: msg.content?.length,
                    conversationId: msg.conversationId
                  });
                });
                return allMessages;
              },
              testMessageSave: async () => {
                console.log('üß™ TESTING MESSAGE SAVE...');
                const testMessage = {
                  id: generateUUID(),
                  role: 'user' as const,
                  type: 'text' as const,
                  content: 'Test message for debugging',
                  timestamp: new Date().toISOString(),
                  status: 'sent' as const
                };
                console.log('üß™ Test message created:', testMessage);
                await addMessage(testMessage);
                console.log('‚úÖ Test message saved - check Dexie now');
              },
      // ‚úÖ EMERGENCY: Force reset all processing states
      emergencyReset: () => {
        console.log('üö® Emergency reset triggered - clearing all processing states');
        isProcessingRef.current = false;
        setIsProcessing(false);
        setIsTyping(false);
        setIsStreaming(false);
        setAssistantHasStarted(false);
        console.log('‚úÖ All processing states reset');
      },
      // ‚úÖ EMERGENCY: Clear corrupted messages and start fresh
      clearCorruptedMessages: async () => {
        console.log('üßπ Clearing corrupted messages...');
        const currentConvId = new URLSearchParams(window.location.search).get('conversation') || localStorage.getItem('atlas:lastConversationId');
        if (currentConvId) {
          // Delete all messages for this conversation
          await atlasDB.messages.where('conversationId').equals(currentConvId).delete();
          console.log('‚úÖ Cleared corrupted messages for conversation:', currentConvId);
          // Refresh messages
          window.location.reload();
        } else {
          console.log('‚ùå No conversation ID found');
        }
      },
      // ‚úÖ EMERGENCY: Force UI reset
      forceUIReset: () => {
        console.log('üö® Force UI reset triggered');
        debugSetMessages([], 'handleNewConversation');
        setConversationId(null);
        setAssistantHasStarted(false);
        setIsTyping(false);
        setIsStreaming(false);
        setIsProcessing(false);
        isProcessingRef.current = false;
        console.log('‚úÖ UI state reset complete');
        // Force re-render
        setTimeout(() => window.location.reload(), 100);
      }
    };
  }, [conversationId, messages]);

  // Health check with auto-retry every 30 seconds
  useEffect(() => {
    let interval: ReturnType<typeof setInterval>;

    async function runHealthCheck() {
      setRetrying(true);
      const result = await checkSupabaseHealth();
      if (!result.ok) {
        setHealthError("Atlas servers are unreachable. Retrying in 30s...");
      } else {
        setHealthError(null);
      }
      setRetrying(false);
    }

    runHealthCheck(); // immediate check
    interval = setInterval(runHealthCheck, 30_000); // retry every 30s

    return () => clearInterval(interval);
  }, []);

  // Show health error fallback if Supabase is unreachable
  if (healthError) {
    return (
      <div className="min-h-screen bg-gradient-to-br from-gray-900 via-gray-800 to-gray-900 text-white flex items-center justify-center p-6">
        <div className="p-6 bg-yellow-100 text-yellow-800 rounded-xl text-center max-w-md border border-yellow-200">
          <div className="text-lg font-semibold mb-2">Connection Issue</div>
          <div className="mb-4">{healthError}</div>
          {retrying && (
            <div className="flex justify-center">
              <svg
                className="animate-spin h-6 w-6 text-yellow-700"
                xmlns="http://www.w3.org/2000/svg"
                fill="none"
                viewBox="0 0 24 24"
              >
                <circle
                  className="opacity-25"
                  cx="12"
                  cy="12"
                  r="10"
                  stroke="currentColor"
                  strokeWidth="4"
                ></circle>
                <path
                  className="opacity-75"
                  fill="currentColor"
                  d="M4 12a8 8 0 018-8v4a4 4 0 00-4 4H4z"
                ></path>
              </svg>
            </div>
          )}
        </div>
      </div>
    );
  }

  return (
    <ErrorBoundary>
      <div className="min-h-screen bg-gradient-to-br from-gray-900 via-gray-800 to-gray-900 text-white">
        {/* Header with Menu Button */}
        <div className="bg-gray-800/50 backdrop-blur-sm border-b border-gray-700/50 sticky top-0 z-30">
          <div className="max-w-4xl mx-auto px-4 py-3 sm:py-4">
            <div className="flex items-center justify-between">
              <div className="flex items-center space-x-3 sm:space-x-4">
                <button
                  onClick={() => setSidebarOpen(!sidebarOpen)}
                  className="p-2 rounded-lg bg-gray-700/50 hover:bg-gray-600/50 transition-colors"
                >
                  <Menu className="w-5 h-5" />
                </button>
                <div>
                  <h1 className="text-xl sm:text-2xl font-bold text-white">Atlas AI</h1>
                  <p className="text-gray-400 text-sm sm:text-base hidden sm:block">Your emotionally intelligent AI assistant</p>
                </div>
              </div>
              <div className="flex items-center space-x-2 sm:space-x-4">
                {/* ‚úÖ OFFLINE STATUS INDICATOR */}
                {!isOnline && (
                  <div className="flex items-center gap-2 px-3 py-1.5 bg-orange-500/20 border border-orange-500/30 rounded-lg">
                    <div className="w-2 h-2 bg-orange-400 rounded-full animate-pulse"></div>
                    <span className="text-orange-300 text-xs font-medium">Offline</span>
                  </div>
                )}
                <SyncStatus isOnline={isOnline} />
                <button
                  onClick={handleLogout}
                  className="px-3 py-1.5 sm:px-4 sm:py-2 bg-gray-700 hover:bg-gray-600 rounded-lg transition-colors text-sm sm:text-base"
                >
                  Logout
                </button>
              </div>
            </div>
          </div>
        </div>

        {/* Sidebar Drawer */}
        <AnimatePresence>
          {sidebarOpen && (
            <>
              {/* Backdrop */}
              <motion.div
                initial={{ opacity: 0 }}
                animate={{ opacity: 1 }}
                exit={{ opacity: 0 }}
                className="fixed inset-0 bg-black/50 z-40"
                onClick={() => setSidebarOpen(false)}
              />
              
              {/* Sidebar */}
              <motion.div
                initial={{ x: -320 }}
                animate={{ x: 0 }}
                exit={{ x: -320 }}
                transition={{ type: "spring", damping: 25, stiffness: 200 }}
                className="fixed left-0 top-0 h-full w-80 bg-[#1e1f24] border-r border-gray-800 z-50 overflow-y-auto"
              >
                <div className="p-4 space-y-6">
                  {/* Close Button */}
                  <div className="flex justify-end">
                    <button
                      onClick={() => setSidebarOpen(false)}
                      className="p-2 rounded-lg hover:bg-gray-700/50 transition-colors"
                    >
                      <X className="w-5 h-5" />
                    </button>
                  </div>
                  
                  {/* Sidebar Content */}
                  <QuickActions 
                    onShowHistory={() => setShowHistoryModal(true)} 
                    onNewConversation={handleNewConversation}
                  />
                  <UsageCounter userId={userId ?? ''} />
                  <InsightsWidget />
                  <PrivacyToggle />
                </div>
              </motion.div>
            </>
          )}
        </AnimatePresence>

        {/* Chat Container - Fixed Height Calculation */}
        <div 
          className="flex flex-col h-screen"
          onClick={(e) => {
            // üì± ChatGPT-like behavior: dismiss keyboard when clicking outside input
            const target = e.target as HTMLElement;
            const isInputArea = target.closest('[data-input-area]');
            
            if (!isInputArea && inputRef.current) {
              inputRef.current.blur();
            } else if (inputRef.current) {
              inputRef.current.focus();
            }
          }}
        >

          {/* Messages - Fixed Container with Bottom Padding for Fixed Input */}
          <div 
            ref={messagesContainerRef} 
            className="flex-1 overflow-y-auto px-4 py-6 pb-24 min-h-0"
            onScroll={() => {
              // üì± Dismiss keyboard when scrolling (ChatGPT-like behavior)
              if (inputRef.current) {
                inputRef.current.blur();
              }
            }}
          >
            <div className="max-w-4xl mx-auto space-y-4">
              
              <MessageListWithPreviews>
                {(() => {
                  const safeMessages = messages || [];
                  console.log('[ChatPage] üé® RENDERING MESSAGES:', {
                    totalMessages: safeMessages.length,
                    messages: safeMessages.map(m => ({
                      id: m.id,
                      role: m.role,
                      content: m.content?.slice(0, 20) + '...',
                      status: m.status
                    }))
                  });
                  
                  if (safeMessages.length > 0) {
                    return (
                      <>
                        {safeMessages.map((message: Message, index: number) => (
                          <EnhancedMessageBubble
                            key={message.id}
                            message={message}
                            isLatest={index === safeMessages.length - 1}
                            isTyping={index === safeMessages.length - 1 && isStreaming && !assistantHasStarted}
                          />
                        ))}
                        
                        {/* ‚úÖ Show typing indicator when Atlas is thinking but no assistant message exists yet */}
                        {isStreaming && safeMessages.length > 0 && !safeMessages.some(msg => msg.role === 'assistant' && msg.status === 'sending') && (
                          <EnhancedMessageBubble
                            key="typing-indicator"
                            message={{
                              id: 'typing-temp',
                              role: 'assistant',
                              content: '...',
                              timestamp: new Date().toISOString(),
                              status: 'sending',
                              type: 'text'
                            }}
                            isLatest={true}
                            isTyping={true}
                          />
                        )}
                        
                      </>
                    );
                  } else {
                    return (
                      <div className="space-y-4">
                        <div className="flex justify-center items-center h-32">
                          <div className="text-center text-gray-400">
                            <div className="mb-4">
                              <img 
                                src="/atlas-logo.png" 
                                alt="Atlas AI" 
                                className="w-16 h-16 mx-auto object-contain"
                              />
                            </div>
                            <h2 className="text-xl font-semibold mb-2">Welcome to Atlas AI</h2>
                            <p className="text-sm">Your emotionally intelligent AI assistant is ready to help.</p>
                            <p className="text-xs mt-2 text-gray-500">Start a conversation below!</p>
                          </div>
                        </div>
                        
                      </div>
                    );
                  }
                })()}
              </MessageListWithPreviews>
              
              
              {/* Scroll anchor */}
              <div ref={bottomRef} />
            </div>
          </div>

          {/* Input Toolbar - Always Visible at Bottom (ChatGPT Style) */}
          <div
            className="
              fixed bottom-0 left-0 right-0
              bg-transparent backdrop-blur-sm
              px-4 py-3
              z-40
            "
          >
            <div className="max-w-4xl mx-auto">
              <EnhancedInputToolbar
                onSendMessage={handleTextMessage}
                isProcessing={isProcessing}
                placeholder="Ask Atlas anything..."
                conversationId={conversationId || undefined}
                inputRef={inputRef}
                addMessage={addMessage}
                isStreaming={isStreaming}
              />
            </div>
          </div>
        </div>

        {/* Modern scroll-to-bottom button with golden sparkle */}
        <ScrollToBottomButton
          onClick={scrollToBottom}
          visible={showScrollButton}
          shouldGlow={shouldGlow}
        />

        {/* Upgrade Modal */}
        <EnhancedUpgradeModal
          isOpen={upgradeModalVisible}
          onClose={() => setUpgradeModalVisible(false)}
          feature={upgradeReason}
          currentUsage={currentUsage}
          limit={limit}
        />

        {/* Conversation History Modal - Rendered at root level */}
        <ConversationHistoryDrawer
          isOpen={showHistoryModal}
          onClose={() => setShowHistoryModal(false)}
          conversations={conversations}
          onDeleteConversation={async (conversationId: string) => {
            if (!conversationId) {
              console.error('No conversation ID provided for deletion');
              return;
            }

            setDeletingId(conversationId);
            try {
              // Check if user is authenticated before attempting Supabase deletion
              const { data: { user }, error: authError } = await supabase.auth.getUser();
              
              if (authError) {
                console.error('‚ùå Authentication error:', authError);
              } else if (!user) {
                console.warn('‚ö†Ô∏è No authenticated user - skipping Supabase deletion');
              } else {
                // Soft-delete from Supabase using RPC function
                console.log('üóëÔ∏è Attempting to soft-delete conversation from Supabase:', conversationId, 'for user:', user.id);
                
                let supabaseSuccess = false;
                for (let attempt = 1; attempt <= 3; attempt++) {
                  try {
                    const { data: rpcData, error: supabaseError } = await supabase.rpc('delete_conversation_soft', {
                      p_user: user.id,
                      p_conversation: conversationId
                    } as any);
                    
                    console.log('üîç RPC Response:', { rpcData, supabaseError });

                    if (supabaseError) {
                      console.error(`‚ùå Supabase soft-delete attempt ${attempt} failed:`, supabaseError);
                      if (attempt < 3) {
                        console.log(`‚è≥ Retrying Supabase soft-delete in 1 second...`);
                        await new Promise(resolve => setTimeout(resolve, 1000));
                      }
                    } else {
                      console.log('‚úÖ Supabase soft-delete successful');
                      supabaseSuccess = true;
                      break;
                    }
                  } catch (retryError) {
                    console.error(`‚ùå Supabase soft-delete attempt ${attempt} exception:`, retryError);
                    if (attempt < 3) {
                      await new Promise(resolve => setTimeout(resolve, 1000));
                    }
                  }
                }
                
                if (!supabaseSuccess) {
                  console.error('‚ùå All Supabase soft-delete attempts failed - continuing with local deletion only');
                }
              }

              // Delete from local database (Dexie)
              await atlasDB.messages.where('conversationId').equals(conversationId).delete();
              await atlasDB.conversations.delete(conversationId);
              
              // Add tombstone to prevent re-import during eventual consistency
              await atlasDB.tombstones.put({
                id: conversationId,
                type: 'conversation',
                deletedAt: Date.now()
              });
              console.log('ü™¶ Added tombstone for conversation:', conversationId);
              
              // Update local state immediately for responsive UI
              setConversations(prev => prev.filter(conv => conv.id !== conversationId));
              
              // Wait a moment for database consistency, then verify deletion
              await new Promise(resolve => setTimeout(resolve, 500));
              
              // Verify deletion worked by checking Supabase again (only non-deleted conversations)
              if (userId) {
                try {
                  const { data: verifyData } = await supabase
                    .from('conversations')
                    .select('id, deleted_at')
                    .eq('id', conversationId)
                    .eq('user_id', userId);
                  
                  if (verifyData && verifyData.length > 0) {
                    const conversation = verifyData[0];
                    if (conversation.deleted_at) {
                      console.log('‚úÖ VERIFICATION SUCCESS: Conversation confirmed soft-deleted in Supabase');
                    } else {
                      console.error('‚ùå VERIFICATION FAILED: Conversation still active in Supabase after deletion!');
                    }
                  } else {
                    console.log('‚úÖ VERIFICATION SUCCESS: Conversation not found in Supabase (hard deleted)');
                  }
                } catch (verifyError) {
                  console.log('üìã Could not verify deletion:', verifyError);
                }
              }
              
              // Trigger immediate sync to update other devices and ensure consistency
              if (userId) {
                try {
                  const { syncService } = await import('../services/syncService');
                  // Force immediate sync after deletion
                  await syncService.syncAll(userId, 'core', true);
                  console.log('‚úÖ Immediate sync completed after deletion');
                } catch (syncError) {
                  console.log('Immediate sync after deletion failed:', syncError);
                  // Fallback to background sync
                  try {
                    const { startBackgroundSync } = await import('../services/syncService');
                    startBackgroundSync(userId, 'core');
                  } catch (fallbackError) {
                    console.log('Background sync fallback failed:', fallbackError);
                  }
                }
              }
              
              console.log('‚úÖ Conversation deleted successfully:', conversationId);
            } catch (err) {
              console.error('‚ùå Failed to delete conversation:', err);
              // Show user-friendly error (could add toast notification here)
            } finally {
              setDeletingId(null);
            }
          }}
          deletingId={deletingId}
        />
        
      </div>
    </ErrorBoundary>
  );
};

export default ChatPage;