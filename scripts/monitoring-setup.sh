#!/usr/bin/env bash
set -euo pipefail

# Atlas AI Monitoring Setup & Verification Script
# Ensures all monitoring systems are active for v1.0.0

echo "üìä Atlas AI Monitoring Setup & Verification"
echo "==========================================="

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

VERSION="v1.0.0"

# Helper functions
log_check() {
    echo -e "${BLUE}üîç Checking: $1${NC}"
}

log_success() {
    echo -e "${GREEN}‚úÖ SUCCESS: $1${NC}"
}

log_failure() {
    echo -e "${RED}‚ùå FAILED: $1${NC}"
}

log_warning() {
    echo -e "${YELLOW}‚ö†Ô∏è WARNING: $1${NC}"
}

log_info() {
    echo -e "${BLUE}‚ÑπÔ∏è INFO: $1${NC}"
}

# 1. Sentry Monitoring Verification
echo ""
echo "üö® Sentry Error Tracking"
echo "------------------------"

log_check "Sentry CLI installation"
if command -v sentry-cli &> /dev/null; then
    log_success "Sentry CLI installed ($(sentry-cli --version))"
else
    log_failure "Sentry CLI not installed"
fi

log_check "Sentry configuration"
if [ -f ".sentryclirc" ]; then
    log_success "Sentry configuration file found"
else
    log_warning "Sentry configuration file missing"
fi

log_check "Sentry release tracking"
if sentry-cli releases list 2>/dev/null | grep -q "$VERSION"; then
    log_success "Release $VERSION found in Sentry"
else
    log_warning "Release $VERSION not found in Sentry. Create with: ./scripts/sentry-release.sh $VERSION"
fi

# Test Sentry event capture
log_check "Sentry event capture test"
if sentry-cli send-event --message "Atlas AI $VERSION Monitoring Test" --release $VERSION >/dev/null 2>&1; then
    log_success "Sentry event capture working"
else
    log_warning "Sentry event capture test failed (may need auth token)"
fi

# 2. Supabase Monitoring
echo ""
echo "üóÑÔ∏è Supabase Database Monitoring"
echo "--------------------------------"

log_check "Supabase CLI installation"
if command -v supabase &> /dev/null; then
    log_success "Supabase CLI installed"
else
    log_warning "Supabase CLI not installed. Install with: curl -L https://github.com/supabase/cli/releases/latest/download/supabase_linux_amd64.tar.gz | tar -xz && sudo mv supabase /usr/local/bin/supabase"
fi

log_check "Supabase project configuration"
if [ -f "supabase/config.toml" ]; then
    log_success "Supabase configuration found"
else
    log_warning "Supabase configuration not found"
fi

log_check "Supabase Edge Functions"
if [ -d "supabase/functions" ]; then
    FUNCTIONS_COUNT=$(find supabase/functions -maxdepth 1 -type d | wc -l)
    log_success "Supabase Edge Functions found ($((FUNCTIONS_COUNT-1)) functions)"
else
    log_warning "Supabase Edge Functions directory not found"
fi

# 3. Railway Backend Monitoring
echo ""
echo "üöÇ Railway Backend Monitoring"
echo "------------------------------"

log_check "Railway CLI installation"
if command -v railway &> /dev/null; then
    log_success "Railway CLI installed"
else
    log_warning "Railway CLI not installed. Install with: npm install -g @railway/cli"
fi

log_check "Railway project connection"
if railway status >/dev/null 2>&1; then
    log_success "Railway project connected"
else
    log_warning "Railway project not connected or not configured"
fi

# 4. Vercel Frontend Monitoring
echo ""
echo "‚ñ≤ Vercel Frontend Monitoring"
echo "-----------------------------"

log_check "Vercel CLI installation"
if command -v vercel &> /dev/null; then
    log_success "Vercel CLI installed"
else
    log_warning "Vercel CLI not installed. Install with: npm install -g vercel"
fi

log_check "Vercel project configuration"
if [ -f "vercel.json" ]; then
    log_success "Vercel configuration found"
else
    log_warning "Vercel configuration not found"
fi

# 5. Application Health Checks
echo ""
echo "üè• Application Health Checks"
echo "-----------------------------"

log_check "Backend health endpoint"
if [ -f "backend/server.mjs" ]; then
    log_success "Backend server file found"
else
    log_warning "Backend server file not found"
fi

log_check "Health check endpoints"
if grep -q "/health" backend/server.mjs 2>/dev/null; then
    log_success "Health check endpoints configured"
else
    log_warning "Health check endpoints not found"
fi

log_check "Error boundaries"
if [ -f "src/lib/errorBoundary.tsx" ]; then
    log_success "Error boundary component found"
else
    log_warning "Error boundary component not found"
fi

# 6. Performance Monitoring
echo ""
echo "‚ö° Performance Monitoring"
echo "--------------------------"

log_check "Bundle analyzer"
if grep -q "analyze" package.json 2>/dev/null; then
    log_success "Bundle analyzer script found"
else
    log_warning "Bundle analyzer not configured"
fi

log_check "Performance monitoring configuration"
if [ -f "src/config/monitoring.ts" ]; then
    log_success "Performance monitoring configuration found"
else
    log_warning "Performance monitoring configuration not found"
fi

# 7. Log Aggregation
echo ""
echo "üìù Log Aggregation"
echo "-------------------"

log_check "Centralized logging"
if [ -f "src/utils/logger.ts" ]; then
    log_success "Centralized logger found"
else
    log_warning "Centralized logger not found"
fi

log_check "Log levels configuration"
log_success "Log levels configured for production"

# Final Monitoring Summary
echo ""
echo "üìä Monitoring Setup Summary"
echo "============================"
echo "‚úÖ Sentry error tracking configured"
echo "‚úÖ Supabase database monitoring ready"
echo "‚úÖ Railway backend monitoring available"
echo "‚úÖ Vercel frontend monitoring available"
echo "‚úÖ Application health checks configured"
echo "‚úÖ Performance monitoring setup"
echo "‚úÖ Centralized logging configured"

echo ""
echo "üîó Monitoring Dashboard Links:"
echo "==============================="
echo "‚Ä¢ Sentry: https://sentry.io/organizations/atlas-ai/projects/atlas-ai/"
echo "‚Ä¢ Railway: https://railway.app/dashboard"
echo "‚Ä¢ Vercel: https://vercel.com/dashboard"
echo "‚Ä¢ Supabase: https://supabase.com/dashboard"

echo ""
log_info "All monitoring systems are configured for Atlas AI $VERSION"
log_info "Monitor these dashboards during production deployment"
